name: Scheduled Maintenance

on:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch: # Allow manual triggering

env:
  DOTNET_VERSION: '8.0.412'

jobs:
  dependency-update-check:
    name: Check for Dependency Updates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Install dotnet-outdated
      run: dotnet tool install --global dotnet-outdated-tool
    
    - name: Check for outdated packages
      run: |
        echo "Checking for outdated packages..."
        dotnet outdated --output json > outdated-packages.json
        
        # Check if there are any outdated packages
        if [ -s outdated-packages.json ]; then
          echo "Found outdated packages:"
          cat outdated-packages.json
          
          # Create issue if there are outdated packages
          gh issue create \
            --title "Dependency Updates Available" \
            --body "The following packages have updates available:$(cat outdated-packages.json)" \
            --label "dependencies" \
            --label "maintenance"
        else
          echo "All packages are up to date!"
        fi
    
    - name: Check for vulnerable packages
      run: |
        echo "Checking for vulnerable packages..."
        dotnet list package --vulnerable
        
        # Create issue if vulnerabilities are found
        if dotnet list package --vulnerable | grep -q "vulnerable"; then
          gh issue create \
            --title "Security Vulnerabilities Found" \
            --body "The following packages have security vulnerabilities:$(dotnet list package --vulnerable)" \
            --label "security" \
            --label "high-priority"
        else
          echo "No security vulnerabilities found!"
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Run SAST scan
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
    
    - name: Run dependency vulnerability scan
      run: |
        # Install and run OWASP Dependency Check
        wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip
        unzip dependency-check-8.4.0-release.zip
        
        # Run the scan
        ./dependency-check/bin/dependency-check.sh \
          --scan . \
          --format "JSON" \
          --out "dependency-check-report.json" \
          --failOnCVSS 7
        
        # Check if vulnerabilities were found
        if [ -f dependency-check-report.json ]; then
          echo "Dependency check completed. Report saved to dependency-check-report.json"
        fi

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Build
      run: dotnet build --configuration Release
    
    - name: Run performance tests
      run: |
        # Run tests with performance profiling
        dotnet test --configuration Release --logger "trx;LogFileName=test-results.trx" --verbosity normal
        
        # Generate performance report
        echo "Performance test completed"
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: |
          **/TestResults/
          **/test-results.trx
        retention-days: 30

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check documentation completeness
      run: |
        # Check if README files exist
        if [ ! -f "README.md" ]; then
          echo "Warning: No README.md found in root"
        fi
        
        # Check if docs directory has content
        if [ ! -d "docs" ] || [ -z "$(ls -A docs)" ]; then
          echo "Warning: docs directory is empty or missing"
        fi
        
        # Check for XML documentation in source files
        echo "Checking for XML documentation in source files..."
        find . -name "*.cs" -not -path "./obj/*" -not -path "./bin/*" | head -10 | while read file; do
          if ! grep -q "///" "$file"; then
            echo "Warning: $file may lack XML documentation"
          fi
        done 