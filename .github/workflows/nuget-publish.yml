name: Publish to NuGet.org

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to publish (e.g., v1.0.0)'
        required: true
        type: string
      approve_publish:
        description: 'Approve publishing to NuGet.org'
        required: true
        type: boolean
        default: false

env:
  DOTNET_VERSION: '8.0.412'

jobs:
  validate-release:
    name: Validate Release for NuGet Publishing
    runs-on: ubuntu-latest
    if: github.event.inputs.approve_publish == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.inputs.release_tag }}
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Extract version from tag
      id: get_version
      run: |
        TAG_VERSION="${{ github.event.inputs.release_tag }}"
        if [[ $TAG_VERSION == v* ]]; then
          TAG_VERSION="${TAG_VERSION#v}"
        fi
        echo "version=$TAG_VERSION" >> $GITHUB_OUTPUT
        echo "Version extracted: $TAG_VERSION"
    - name: Validate Version Consistency
      run: |
        echo "Release tag: ${{ github.event.inputs.release_tag }}"
        echo "Extracted version: ${{ steps.get_version.outputs.version }}"
        echo "✅ Version extracted from tag"
    - name: Build and Pack
      run: |
        dotnet restore
        dotnet build --configuration Release --no-restore --verbosity normal -p:Version=${{ steps.get_version.outputs.version }}
        dotnet pack --configuration Release --no-build --output ./artifacts -p:Version=${{ steps.get_version.outputs.version }}
    - name: Validate Package Versions
      run: |
        echo "Validating package versions..."
        for package in ./artifacts/*.nupkg; do
          echo "Checking package: $package"
          # Extract version from package name
          PACKAGE_VERSION=$(basename "$package" | sed -n 's/.*\.\([0-9]\+\.[0-9]\+\.[0-9]\+.*\)\.nupkg/\1/p')
          echo "Package version: $PACKAGE_VERSION"
          # Compare with extracted version
          if [[ "$PACKAGE_VERSION" != "${{ steps.get_version.outputs.version }}" ]]; then
            echo "Error: Package version mismatch!"
            echo "Package: $PACKAGE_VERSION"
            echo "Expected: ${{ steps.get_version.outputs.version }}"
            exit 1
          fi
        done
        echo "✅ All package versions validated"
    - name: Check NuGet.org for existing version
      run: |
        echo "Checking if version already exists on NuGet.org..."
        for package in FluentTestScaffold.Core FluentTestScaffold.AspNetCore FluentTestScaffold.Autofac FluentTestScaffold.Bdd FluentTestScaffold.EntityFrameworkCore FluentTestScaffold.Nunit; do
          echo "Checking $package version ${{ steps.gitversion.outputs.SemVer }}"
          # Use curl to check if version exists
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "https://api.nuget.org/v3/registration5-semver1/$package/index.json")
          if [[ $RESPONSE == "200" ]]; then
            echo "Package $package exists, checking version..."
            # This is a simplified check - in practice you'd parse the JSON response
            echo "⚠️  Warning: Version may already exist on NuGet.org"
        done
    - name: Upload packages for publishing
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./artifacts/
        retention-days: 1

  publish-nuget:
    name: Publish to NuGet.org
    runs-on: ubuntu-latest
    needs: validate-release
    if: needs.validate-release.result == 'success'
    steps:
    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: ./artifacts
    - name: Publish to NuGet.org
      run: |
        echo "Publishing packages to NuGet.org..."
        for package in ./artifacts/*.nupkg; do
          echo "Publishing package: $package"
          dotnet nuget push "$package" \
            --source https://api.nuget.org/v3/index.json \
            --api-key ${{ secrets.NUGET_API_KEY }}
        done
        echo "✅ All packages published to NuGet.org"
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
    
    - name: Create Release Comment
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: `## ✅ NuGet.org Publishing Complete
            **Version:** ${{ steps.get_version.outputs.version }}
            **Tag:** ${{ github.event.inputs.release_tag }}
            All packages have been successfully published to NuGet.org:
            - FluentTestScaffold.Core
            - FluentTestScaffold.AspNetCore
            - FluentTestScaffold.Autofac
            - FluentTestScaffold.Bdd
            - FluentTestScaffold.EntityFrameworkCore
            - FluentTestScaffold.Nunit
            ### Installation:
            \`\`\`bash
            dotnet add package FluentTestScaffold.Core
            \`\`\`
            Packages are now available on [NuGet.org](https://www.nuget.org/packages?q=FluentTestScaffold)`
          })
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}          