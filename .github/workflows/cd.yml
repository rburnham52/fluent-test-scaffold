name: CD

on:
  push:
    tags: [ 'v*' ]

env:
  DOTNET_VERSION: '8.0.412'

jobs:
  validate-and-prepare:
    name: Validate and Prepare Release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for Nerdbank.GitVersioning
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Setup GitVersion
      uses: gittools/actions/gitversion/setup@v0.12.0
      with:
        versionSpec: '5.12.0'
    - name: Execute GitVersion
      uses: gittools/actions/gitversion/execute@v0.12.0
      with:
        useConfigFile: true
        configFilePath: version.json
    - name: Validate Version Consistency
      run: |
        # Get the version from GitVersion
        echo "GitVersion calculated version: ${{ steps.gitversion.outputs.SemVer }}"
        echo "Tag version: ${{ github.ref_name }}"
        # Extract version from tag (remove 'v' prefix)
        TAG_VERSION="${{ github.ref_name }}"
        if [[ $TAG_VERSION == v* ]]; then
          TAG_VERSION="${TAG_VERSION#v}"
        fi
        # Compare versions
        if [[ "${{ steps.gitversion.outputs.SemVer }}" != "$TAG_VERSION" ]]; then
          echo "Error: Version mismatch!"
          echo "GitVersion calculated: ${{ steps.gitversion.outputs.SemVer }}"
          echo "Tag version: $TAG_VERSION"
          exit 1
        fi
        echo "✅ Version consistency validated"
    - name: Build and Pack
      run: |
        dotnet restore
        dotnet build --configuration Release --no-restore --verbosity normal
        dotnet pack --configuration Release --no-build --output ./artifacts
    - name: Validate Package Versions
      run: |
        echo "Validating package versions..."
        for package in ./artifacts/*.nupkg; do
          echo "Checking package: $package"
          # Extract version from package name
          PACKAGE_VERSION=$(basename "$package" | sed -n 's/.*\.\([0-9]\+\.[0-9]\+\.[0-9]\+.*\)\.nupkg/\1/p')
          echo "Package version: $PACKAGE_VERSION"
          # Compare with GitVersion
          if [[ "$PACKAGE_VERSION" != "${{ steps.gitversion.outputs.SemVer }}" ]]; then
            echo "Error: Package version mismatch!"
            echo "Package: $PACKAGE_VERSION"
            echo "Expected: ${{ steps.gitversion.outputs.SemVer }}"
            exit 1
          fidone
        echo "✅ All package versions validated"
    - name: Upload artifacts for review
      uses: actions/upload-artifact@v4
      with:
        name: release-packages
        path: ./artifacts/
        retention-days: 1
    - name: Create Draft Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Release Candidate
          
          This is a draft release for review before publishing to NuGet.org.
          **Version:** ${{ steps.gitversion.outputs.SemVer }}
          **Tag:** ${{ github.ref_name }}
          ### Packages Included:
          - FluentTestScaffold.Core
          - FluentTestScaffold.AspNetCore
          - FluentTestScaffold.Autofac
          - FluentTestScaffold.Bdd
          - FluentTestScaffold.EntityFrameworkCore
          - FluentTestScaffold.Nunit
          ### Next Steps:
          1. Review the packages in the artifacts
          2. Approve the release by commenting "approve" on this release
          3. The packages will be published to NuGet.org after approval
          ### Installation (GitHub Packages):
          ```bash
          dotnet add package FluentTestScaffold.Core
          ```
        draft: true
        prerelease: false
    - name: Wait for Manual Approval
      uses: actions/github-script@v7
      id: wait-for-approval
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          const approvalComment = comments.find(comment => 
            comment.body.toLowerCase().includes('approve') &&
            comment.user.type === 'User'
          );
          if (!approvalComment) {
            core.setFailed('Release not approved. Please comment "approve" on the release to proceed.');
          }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-github:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latestneeds: validate-and-prepare
    if: needs.validate-and-prepare.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-packages
        path: ./artifacts
    
    - name: Publish to GitHub Packages
      run: |
        # Configure NuGet to use GitHub Packages
        dotnet nuget add source https://nuget.pkg.github.com/${{ github.repository }}/index.json \
          --name github \
          --username ${{ github.actor }} \
          --password ${{ secrets.GITHUB_TOKEN }} \
          --store-password-in-clear-text
        
        # Publish each package
        for package in ./artifacts/*.nupkg; do
          echo "Publishing package to GitHub Packages: $package"
          dotnet nuget push "$package" \
            --source github \
            --api-key ${{ secrets.GITHUB_TOKEN }}
        done
    
    - name: Update Release Status
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ needs.validate-and-prepare.outputs.release_id }},
            draft: false,
            body: `## Release ${{ github.ref_name }}
            
            ✅ **Published to GitHub Packages**
            
            This release includes the following packages:
            - FluentTestScaffold.Core
            - FluentTestScaffold.AspNetCore
            - FluentTestScaffold.Autofac
            - FluentTestScaffold.Bdd
            - FluentTestScaffold.EntityFrameworkCore
            - FluentTestScaffold.Nunit  
            ## Installation
            
            \`\`\`bash
            dotnet add package FluentTestScaffold.Core
            \`\`\`
            
            For more information, visit the [documentation](https://github.com/${{ github.repository }}/tree/main/docs).
            
            **Note:** This release is available on GitHub Packages. NuGet.org publishing requires separate approval.`
          })
      
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}    