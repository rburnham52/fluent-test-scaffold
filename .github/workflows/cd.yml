name: CD

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to deploy (e.g., v1.0.0)'
        required: true
        type: string

env:
  DOTNET_VERSION: '8.0.412'

jobs:
  validate-and-prepare:
    name: Validate and Prepare Release
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: https://www.nuget.org/packages?q=FluentTestScaffold
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Validate release is from main branch
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          RELEASE_BRANCH=$(git branch -r --contains ${{ github.sha }} | grep origin/main || echo "")
          if [[ -z "$RELEASE_BRANCH" ]]; then
            echo "Error: Release must be created from main branch"
            exit 1
          fi
          echo "✅ Release is from main branch"
        fi
    
    - name: Extract version from tag
      id: get_version
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          TAG_VERSION="${{ github.event.release.tag_name }}"
        else
          TAG_VERSION="${{ github.event.inputs.release_tag }}"
        fi
        if [[ $TAG_VERSION == v* ]]; then
          TAG_VERSION="${TAG_VERSION#v}"
        fi
        echo "version=$TAG_VERSION" >> $GITHUB_OUTPUT
        echo "Version extracted: $TAG_VERSION"
    - name: Validate Version Consistency
      run: |
        echo "Tag version: ${{ github.ref_name }}"
        echo "Extracted version: ${{ steps.get_version.outputs.version }}"
        echo "✅ Version extracted from tag"
    - name: Build and Pack
      run: |
        dotnet restore
        dotnet build --configuration Release --no-restore --verbosity normal -p:Version=${{ steps.get_version.outputs.version }}
        dotnet pack --configuration Release --no-build --output ./artifacts -p:Version=${{ steps.get_version.outputs.version }}
    - name: Validate Package Versions
      run: |
        echo "Validating package versions..."
        for package in ./artifacts/*.nupkg; do
          echo "Checking package: $package"
          # Extract version from package name
          PACKAGE_VERSION=$(basename "$package" | sed -n 's/.*\.\([0-9]\+\.[0-9]\+\.[0-9]\+.*\)\.nupkg/\1/p')
          echo "Package version: $PACKAGE_VERSION"
          # Compare with extracted version
          if [[ "$PACKAGE_VERSION" != "${{ steps.get_version.outputs.version }}" ]]; then
            echo "Error: Package version mismatch!"
            echo "Package: $PACKAGE_VERSION"
            echo "Expected: ${{ steps.get_version.outputs.version }}"
            exit 1
          fi
        done
        echo "✅ All package versions validated"
    - name: Upload artifacts for review
      uses: actions/upload-artifact@v4
      with:
        name: release-packages
        path: ./artifacts/
        retention-days: 1
    - name: Validate all CI checks passed
      run: |
        echo "✅ All CI checks must pass before deployment"
        echo "This job only runs after successful CI validation"

  publish-nuget:
    name: Publish to NuGet.org (Manual Approval Required)
    runs-on: ubuntu-latest
    needs: validate-and-prepare
    if: needs.validate-and-prepare.result == 'success'
    environment: 
      name: nuget-production
      url: https://www.nuget.org/packages?q=FluentTestScaffold
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-packages
        path: ./artifacts
    
    - name: Publish to NuGet.org
      run: |
        echo "Publishing packages to NuGet.org..."
        for package in ./artifacts/*.nupkg; do
          echo "Publishing package: $package"
          dotnet nuget push "$package" \
            --source https://api.nuget.org/v3/index.json \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --skip-duplicate
        done
        echo "✅ All packages published to NuGet.org"
    
    - name: Update Release Status
      uses: actions/github-script@v7
      with:
        script: |
          if (context.eventName === 'release') {
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body: `## Release ${{ steps.get_version.outputs.version }}
              
              ✅ **Published to NuGet.org**
              
              This release includes the following packages:
              - FluentTestScaffold.Core
              - FluentTestScaffold.AspNetCore
              - FluentTestScaffold.Autofac
              - FluentTestScaffold.Bdd
              - FluentTestScaffold.EntityFrameworkCore
              - FluentTestScaffold.Nunit  
              
              ## Installation
              
              \`\`\`bash
              dotnet add package FluentTestScaffold.Core --version ${{ steps.get_version.outputs.version }}
              \`\`\`
              
              For more information, visit the [documentation](https://github.com/${{ github.repository }}/tree/main/docs).
              
              **Deployment Process:**
              1. ✅ PR reviewed and merged to main
              2. ✅ Release tagged from main branch  
              3. ✅ All CI checks passed
              4. ✅ Manual approval granted
              5. ✅ Published to NuGet.org`
            })
          }
      
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}             