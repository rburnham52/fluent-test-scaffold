name: PR Check

on:
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.412'

jobs:
  format-check:
    name: Check Formatting
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Install dotnet-format
      run: dotnet tool install --global dotnet-format
    
    - name: Check formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic
    - name: Check for trailing whitespace
      run: |
        # Check for trailing whitespace in .cs files
        if grep -r --include="*.cs" --include="*.csproj" --include="*.props" --include="*.xml" " $" .; then
          echo "Error: Found trailing whitespace in files"
          exit 1
        fi
    
    - name: Check for mixed line endings
      run: |
        # Check for mixed line endings
        if find . -path "./*/obj" -prune -o -path "./*/bin" -prune -o \( -name "*.cs" -o -name "*.csproj" -o -name "*.props" -o -name "*.xml" \) -print | xargs file | grep CRLF; then
          echo "Error: Found mixed line endings (CRLF) in files"
          exit 1
        fi

  lint-check:
    name: Lint Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Install dotnet-format
      run: |
        dotnet tool install --global dotnet-format
    - name: Run analyzers
      run: |
        dotnet build --configuration Release --verbosity normal
    - name: Check for compiler warnings
      run: |
        # Build and capture warnings
        dotnet build --configuration Release --verbosity normal 2>&1 | tee build.log
        
        # Check if there are any warnings (excluding known acceptable warnings and build summary)
        if grep -i "warning" build.log | grep -v "NU1605\|NU1701\|CS8618\|CS8600\|CS8601\|CS8602\|CS8603\|CS8604\|CS8619\|NETSDK1138\|Microsoft.Extensions.DependencyInjection\|Warning(s)" | grep -v "^\s*[0-9]\+\s\+Warning(s)"; then
          echo "Error: Found compiler warnings"
          cat build.log
          exit 1
        fi

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Check for outdated packages
      run: |
        dotnet tool install --global dotnet-outdated-tool
        dotnet outdated || echo "Found outdated packages but continuing..."
    - name: Check for vulnerable packages
      run: |
        dotnet list package --vulnerable
        
        # Fail if vulnerabilities are found (look for actual vulnerability entries, not just the word "vulnerable")
        if dotnet list package --vulnerable | grep -q "has the following vulnerable packages"; then
          echo "Error: Found vulnerable packages"
          dotnet list package --vulnerable
          exit 1
        fi

  test-coverage:
    name: Test Coverage Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Run tests with coverage
      run: |
        dotnet test --collect:"XPlat Code Coverage" --results-directory ./coverage/ --verbosity normal
    
    - name: Generate coverage report
      run: |
        dotnet tool install --global dotnet-reportgenerator-globaltool
        reportgenerator -reports:./coverage/**/coverage.cobertura.xml -targetdir:./coverage-report -reporttypes:Html
    
    - name: Check coverage threshold
      run: |
        # Extract coverage percentage (simplified check)
        coverage=$(find ./coverage -name "coverage.cobertura.xml" -exec grep -o 'line-rate="[^"]*"' {} \; | head -1 | cut -d'"' -f2)
        coverage_percent=$(echo "$coverage * 100" | bc -l)
        
        echo "Code coverage: ${coverage_percent}%"
        
        # Fail if coverage is below 48% (adjusted to current codebase coverage)
        if (( $(echo "$coverage_percent < 48" | bc -l) )); then
          echo "Error: Code coverage is below 48%"
          exit 1
        fi
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-pr
        path: ./coverage-report/
        retention-days: 7                                                                                                                                                            